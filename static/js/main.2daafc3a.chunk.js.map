{"version":3,"sources":["reportWebVitals.ts","components/Button/button.tsx","components/Button/index.js","App.tsx","index.tsx"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Button","props","className","children","btnType","size","restProps","finalClassName","classnames","defaultProps","disabled","App","style","display","alignItems","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uKAceA,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,gGCuCDQ,EAA0B,SAACC,GAAW,IAAD,EAE1CC,EAKAD,EALAC,UACAC,EAIAF,EAJAE,SACAC,EAGAH,EAHAG,QACAC,EAEAJ,EAFAI,KACGC,EALP,YAMIL,EANJ,GASMM,EAAiBC,IAAW,aAAcN,GAAf,iCACrBE,GAAYA,GADS,4BAErBC,GAASA,GAFY,IAKjC,OACI,gDACIH,UAAWK,GACPD,GAFR,aAKQH,MAMhBH,EAAOS,aAAe,CAClBC,UAAU,EACVN,QAAS,UACTC,KAAM,MAGKL,IC/EAA,ED+EAA,EE7DAW,MAhBf,WACE,OACE,sBAAKT,UAAU,MAAf,UACE,wCACA,4EACA,sBAAKU,MAAO,CAAEC,QAAS,OAAQC,WAAY,cAA3C,UACE,cAAC,EAAD,CAAQV,QAAQ,UAAhB,qBACA,cAAC,EAAD,CAAQA,QAAQ,UAAhB,qBACA,cAAC,EAAD,CAAQA,QAAQ,SAAhB,oBACA,cAAC,EAAD,CAAQA,QAAQ,OAAhB,kBACA,cAAC,EAAD,CAAQA,QAAQ,OAAhB,yBCTRW,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1B5B,M","file":"static/js/main.2daafc3a.chunk.js","sourcesContent":["import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","\n/*\n* 基本类型\nlet str: string = '' // 字符串类型\nlet bool: boolean = false // 布尔类型\nlet num: number = 0 // 数字类型\nlet arr: number[] = [1, 2, 3] // 数字型数组\nlet arrT: Array<string> = ['1', '2', '3'] // 泛型的方式定义数组\nlet tuple: [string, number] = ['1', 1] // 元组类型\nenum Color { 'Red', Green, Blue } // 枚举类型\nlet c: Color = Color.Red // 获取枚举类型的值\nlet any: any = 1 // 任意类型\nany = '1' // 任意类型可以随便赋值\nlet unusable: void = undefined // void 只能赋值undefined或者null\nlet u: undefined = undefined // undefined 类型\nlet n: null = null // null 类型\n// never类型\n// 返回never的函数必须存在无法达到的终点\nfunction error(message: string): never {\n    throw new Error(message);\n}\n// Object 类型\ndeclare function create(o: object | null): void;\n*/\n\nimport React, { ReactNode, ButtonHTMLAttributes, AnchorHTMLAttributes, FC } from 'react';\nimport classnames from 'classnames'; // 类名合并的小工具，使用前别忘了安装它以及它的@types，安装命令是： npm install classnames @types/classnames --save\nimport './style.css'\n// 定义按钮的类型和大小\nexport type ButtonType = 'primary' | 'default' | 'danger' | 'link' | 'dash'\nexport type Size = 'lg' | 'md' | 'lg'\n\n// 用interface定义按钮props类型约束\ninterface baseBtnType {\n    children?: ReactNode,\n    className?: string,\n    btnType?: ButtonType,\n    size?: Size\n}\n\n// 定义两种联合类型，一种是button型的，一种是a标签型的按钮\ntype NativeButtonProps = baseBtnType & ButtonHTMLAttributes<HTMLElement> // 基础按钮类型，props类型定义\ntype AnchorButtonProps = baseBtnType & AnchorHTMLAttributes<HTMLElement> // a标签类型的按钮，props类型定义\n\n// 用Partial组合两种类型\nexport type ButtonProps = Partial<NativeButtonProps & AnchorButtonProps> // 按钮最终的prop类型定义\n\n// 使用泛型定义函数的入参及返回值类型\nexport const Button: FC<ButtonProps> = (props) => {\n    let {\n        className,\n        children,\n        btnType,\n        size,\n        ...restProps\n    } = props\n\n    // 类名合并工具classnames\n    const finalClassName = classnames('foolwc-btn', className, {\n        [`btn-${btnType}`]: btnType,\n        [`btn-${size}`]: size,\n    })\n\n    return (\n        <button\n            className={finalClassName}\n            {...restProps}\n        >\n            {\n                children\n            }\n        </button>\n    )\n}\n\nButton.defaultProps = {\n    disabled: false,\n    btnType: 'primary',\n    size: 'md'\n}\n\nexport default Button","import Button from './button'\n\nexport default Button","import React from 'react';\nimport logo from './logo.svg';\nimport Button from './components/Button';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1>Button</h1>\n      <h2>不同类型的按钮</h2>\n      <div style={{ display: 'flex', alignItems: 'flex-start' }}>\n        <Button btnType=\"default\">default</Button>\n        <Button btnType=\"primary\">primary</Button>\n        <Button btnType=\"danger\">danger</Button>\n        <Button btnType=\"dash\">dash</Button>\n        <Button btnType=\"link\">link</Button>\n      </div>\n    </div>\n  );\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport reportWebVitals from './reportWebVitals';\nimport App from './App'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n// export { default as Button } from './components/Button/button'"],"sourceRoot":""}